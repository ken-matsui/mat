options {
	STATIC = false;
	DEBUG_PARSER = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)

package mat.parser;

import mat.ast.*;
import mat.entity.*;
import mat.exception.*;
import mat.type.*;

import java.util.*;
import java.io.*;

public class Parser {
	private String sourceName;
	private Set<String> knownTypedefs;

	public Parser(Reader s, String name, boolean debug) {
		this(s);
		this.sourceName = name;
		this.knownTypedefs = new HashSet<>();
		if (debug) {
			enable_tracing();
		} else {
			disable_tracing();
		}
	}

	public AST parse() throws SyntaxException {
		try {
			return CompilationUnit();
		} catch (TokenMgrError err) {
			throw new SyntaxException(err.getMessage());
		} catch (ParseException ex) {
			throw new SyntaxException(ex.getMessage());
		} catch (LookaheadSuccess err) {
			throw new SyntaxException("syntax error");
		}
	}

	static final public String SOURCE_ENCODING = "UTF-8";

	static public Parser newFileParser(File file, boolean debug)
									   throws FileException {
		try {
			BufferedReader r = new BufferedReader(
				new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING)
			);
			return new Parser(r, file.getPath(), debug);
		} catch (FileNotFoundException ex) {
			throw new FileException(ex.getMessage());
		} catch (UnsupportedEncodingException ex) {
			throw new Error("UTF-8 is not supported?: " + ex.getMessage());
		}
	}

	static public AST parseFile(File file, boolean debug)
								 throws SyntaxException, FileException {
		return newFileParser(file, debug).parse();
	}

    private void addType(String name) {
        knownTypedefs.add(name);
    }

    private IntegerLiteralNode integerNode(Location loc, String image) {
        int base = getBase(image);
        String s = image;
        if (base == 16) {
            s = image.substring(2);
        } else if (base == 8) {
            s = image.substring(1);
        }

        if (image.endsWith("i8")) {
            long i = Long.parseLong(s.replaceFirst("i8", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.i8Ref(), i);
        } else if (image.endsWith("i16")) {
            long i = Long.parseLong(s.replaceFirst("i16", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.i16Ref(), i);
        } else if (image.endsWith("i32")) {
            long i = Long.parseLong(s.replaceFirst("i32", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.i32Ref(), i);
        } else if (image.endsWith("i64")) {
            long i = Long.parseLong(s.replaceFirst("i64", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.i64Ref(), i);
        } else if (image.endsWith("u8")) {
            long i = Long.parseLong(s.replaceFirst("u8", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.u8Ref(), i);
        } else if (image.endsWith("u16")) {
            long i = Long.parseLong(s.replaceFirst("u16", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.u16Ref(), i);
        } else if (image.endsWith("u32")) {
            long i = Long.parseLong(s.replaceFirst("u32", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.u32Ref(), i);
        } else if (image.endsWith("u64")) {
            long i = Long.parseLong(s.replaceFirst("u64", ""), base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.u64Ref(), i);
        } else {
            long i = Long.parseLong(s, base);
            return new IntegerLiteralNode(loc, IntegerTypeRef.i32Ref(), i);
        }
    }

    private int getBase(String image) {
        if (image.startsWith("0x") || image.startsWith("0X")) {
            return 16;
        } else if (image.startsWith("0") && !image.equals("0")) {
            return 8;
        } else {
            return 10;
        }
    }

    private long characterCode(String image) throws ParseException {
        String s = stringValue(image);
        if (s.length() != 1) {
            throw new Error("must not happen: character length > 1");
        }
        return s.charAt(0);
    }

    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1, _image.length() - 1);

        while ((idx = image.indexOf("\\", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx+1))
                    && Character.isDigit(image.charAt(idx+2))
                    && Character.isDigit(image.charAt(idx+3))) {
                buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx+1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }

    // #@@range/unescapeOctal{
    private static final int charMax = 255;

    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits, 8);
        if (i > charMax) {
            throw new ParseException(
                "octal character sequence too big: \\" + digits);
        }
        return (char)i;
    }
    // #@@}

    // #@@range/unescapeSeq{
    private static final char bell = 7;
    private static final char backspace = 8;
    private static final char escape = 27;
    private static final char vt = 11;

    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
        case '0': return '\0';
        case '"': return '"';
        case '\'': return '\'';
        case 'a': return bell;
        case 'b': return backspace;
        case 'e': return escape;
        case 'f': return '\f';
        case 'n': return '\n';
        case 'r': return '\r';
        case 't': return '\t';
        case 'v': return vt;
        default:
            throw new ParseException("unknown escape sequence: \"\\" + c);
        }
    }
    // #@@}

	protected Location location(Token t) {
        return new Location(sourceName, t);
    }
}
PARSER_END(Parser)

//
// Skip tokens
//

// Ignore spaces
SKIP: { <SPACE: ([" ", "\t", "\r", "\n", "\f"])> }

// Keep two types of comments
SPECIAL_TOKEN: {
    <LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r\n" | "\r")?>
}
MORE: { "/*" : IN_BLOCK_COMMENT }
<IN_BLOCK_COMMENT> MORE: { <~[]> }
<IN_BLOCK_COMMENT> SPECIAL_TOKEN: { <BLOCK_COMMENT: "*/"> : DEFAULT }

//
// Tokens
//

// Reserved keywords
TOKEN: {
      <VOID     : "void">
    | <CHAR     : "char">
    | <I8       : "i8">
    | <I16      : "i16">
    | <I32      : "i32">
    | <I64      : "i64">
    | <U8       : "u8">
    | <U16      : "u16">
    | <U32      : "u32">
    | <U64      : "u64">
    | <STRUCT   : "struct">
    | <UNION    : "union">
    | <ENUM     : "enum">
    | <STATIC   : "static">
    | <EXTERN   : "extern">
    | <CONST    : "const">
    | <IF       : "if">
    | <ELSE     : "else">
    | <MATCH    : "match">
    | <WHILE    : "while">
    | <DO       : "do">
    | <FOR      : "for">
    | <RETURN   : "return">
    | <BREAK    : "break">
    | <CONTINUE : "continue">
    | <TYPE     : "type">
    | <IMPORT   : "import">
    | <SIZEOF   : "sizeof">
    | <FN       : "fn">
    | <LET      : "let">
    | <MUT      : "mut">
}

TOKEN: {
    <IDENTIFIER: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])*>
}

TOKEN: {
    <NUMERIC_TYPE: "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64">
}

TOKEN: {
    <INTEGER:
        ["1"-"9"] (["0"-"9"])* (<NUMERIC_TYPE>)?
        | "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+ (<NUMERIC_TYPE>)?
        | "0" (["0"-"7"])* (<NUMERIC_TYPE>)?
    >
}

// character literal
MORE: { "'" : IN_CHARACTER }                           // rule1
<IN_CHARACTER> MORE: {
      <~["'", "\\", "\n", "\r"]> : CHARACTER_TERM      // rule2
    | <"\\" (["0"-"7"]){3}>      : CHARACTER_TERM      // rule3
    | <"\\" ~[]>                 : CHARACTER_TERM      // rule4
}
<CHARACTER_TERM> TOKEN: { <CHARACTER: "'"> : DEFAULT } // rule5

// string literal
MORE: { "\"" : IN_STRING }                             // rule1
<IN_STRING> MORE: {
      <(~["\"", "\\", "\n", "\r"])+>                   // rule2
    | <"\\" (["0"-"7"]){3}>                            // rule3
    | <"\\" ~[]>                                       // rule4
}
<IN_STRING> TOKEN: { <STRING: "\""> : DEFAULT }        // rule5

//
// Rule Fragments
//

String Name():
{
	Token t;
}
{
	t=<IDENTIFIER> { return t.image; }
}

TypeNode Type():
{
    TypeRef ref;
}
{
    ref=Typeref() { return new TypeNode(ref); }
}
TypeRef Typeref():
{
    Token t;
}
{
    t=<VOID> { return new VoidTypeRef(location(t)); }
    | t=<CHAR> { return IntegerTypeRef.i8Ref(location(t)); }
    | t=<U8> { return IntegerTypeRef.u8Ref(location(t)); }
    | t=<U16> { return IntegerTypeRef.u16Ref(location(t)); }
    | t=<U32> { return IntegerTypeRef.u32Ref(location(t)); }
    | t=<U64> { return IntegerTypeRef.u64Ref(location(t)); }
    | t=<I8> { return IntegerTypeRef.i8Ref(location(t)); }
    | t=<I16> { return IntegerTypeRef.i16Ref(location(t)); }
    | t=<I32> { return IntegerTypeRef.i32Ref(location(t)); }
    | t=<I64> { return IntegerTypeRef.i64Ref(location(t)); }
}

boolean Mutability():
{
    Token t = null;
}
{
    [t=<MUT>] { return t != null; }
}

//
// Main Rules
//

AST CompilationUnit():
{
    Token t;
	ArrayList<String> imports;
    Declarations defs;
}
{
    {
        t = getToken(1);
    }
    imports=ImportStmts() defs=TopDefs() <EOF>
	{
        defs.addImports(imports);
		return new AST(location(t), defs);
	}
}

ArrayList<String> ImportStmts():
{
    String i;
    ArrayList<String> imports = new ArrayList<>();
}
{
    ( i=ImportStmt() { imports.add(i); } )*
    {
        return imports;
    }
}
String ImportStmt():
{
    StringBuilder builder = new StringBuilder();
    String n;
}
{
	<IMPORT> n=Name() { builder.append(n); }
	("." n=Name() { builder.append("."); builder.append(n); })* ";"
	{
        return builder.toString();
    }
}

Declarations TopDefs():
{
    Declarations decls = new Declarations();
    DefinedVariable defvars;
    Constant defconst;
    StructNode defstruct;
    DefinedFunction defn;
    TypedefNode typedef;
}
{
    ( LOOKAHEAD(2) defconst=Defconst() { decls.addConstant(defconst); }
    | defvars=Defvar() { decls.addDefvar(defvars); }
    | defn=Defn() { decls.addDefn(defn); }
    | defstruct=Defstruct() { decls.addDefstruct(defstruct); }
    | typedef=Typedef() { decls.addTypedef(typedef); }
    )*
    {
        return decls;
    }
}

// let mut name: type = expr;
DefinedVariable Defvar():
{
    boolean mut;
    TypeNode type;
    String name;
    ExprNode init = null;
}
{
    <LET> <MUT> name=Name() ":" type=Type() ["=" init=expr()] ";"
    {
        // TODO: priv is always false
        return new DefinedVariable(false, type, name, init);
    }
}

// let name: type = expr;
// TODO: Merging into defvar would much clearer?
Constant Defconst():
{
    TypeNode type;
    String name;
    ExprNode init = null;
}
{
    <LET> name=Name() ":" type=Type() ["=" init=expr()] ";"
    {
        return new Constant(type, name, init);
    }
}

// fn name(...) -> type {}
DefinedFunction Defn():
{
    TypeRef ret;
    String n;
    Params ps;
    BlockNode body;
}
{
    <FN> n=Name() "(" ps=params() ")" "->" ret=Typeref() body=block()
    {
        TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
        // TODO: priv is always false
        return new DefinedFunction(false, new TypeNode(t), n, ps, body);
    }
}

// struct name {
//     member: type,
//     ...
// }
StructNode Defstruct():
{
    Token t;
    String n;
    List<Slot> membs;
}
{
    t=<STRUCT> n=Name() membs=MemberList()
        {
            return new StructNode(location(t), new StructTypeRef(n), n, membs);
        }
}

List<Slot> MemberList():
{
    List<Slot> membs = new ArrayList<>();
    Slot s;
}
{
    "{" (s=slot() "," { membs.add(s); })* "}"
        {
            return membs;
        }
}

// TODO: should be merged into `parameter`
// name: type
Slot slot():
{
    TypeNode t;
    String n;
}
{
    n=Name() ":" t=Type() { return new Slot(t, n); }
}

// type new = old;
TypedefNode Typedef():
{
    Token t;
    TypeRef ref;
    Token newname;
}
{
    t=<TYPE> newname=<IDENTIFIER> "=" ref=Typeref() ";"
    {
        addType(newname.image);
        return new TypedefNode(location(t), ref, newname.image);
    }
}

// name1: type1, name2: type2, name3: type3
// Do not accept `...` like C
Params params():
{
    ArrayList<Parameter> ps = new ArrayList<>();
    Parameter p1 = null, pN;
}
{
    [ p1=param() { ps.add(p1); }
      ("," pN=param() { ps.add(pN); })* ]
        {
            if (p1 == null) {
                return new Params(null, new ArrayList<>());
            }
            return new Params(p1.location(), ps);
        }
}
// name: type
// TODO: support mut
Parameter param():
{
    String n;
    TypeNode t;
}
{
    n=Name() ":" t=Type()
        {
            return new Parameter(t, n);
        }
}

BlockNode block():
{
    Token t;
    DefinedVariable var;
    List<DefinedVariable> vars = new ArrayList<>();
    StmtNode stmt;
    List<StmtNode> stmts = new ArrayList<>();
}
{
    t="{"
    ( var=Defvar() { vars.add(var); }
    | stmt=stmt() { stmts.add(stmt); }
    )*
    "}"
    {
        return new BlockNode(location(t), vars, stmts);
    }
}

StmtNode stmt():
{
    StmtNode n = null;
    ExprNode e = null;
}
{
    ( ";" // empty statement
    | e=expr() ";" { n = new ExprStmtNode(e.location(), e); }
    | n=block()
    | n=if_stmt()
    | n=return_stmt()
    )
    {
        return n;
    }
}

IfNode if_stmt():
{
    Token t;
    ExprNode cond;
    StmtNode thenBody, elseBody = null;
}
{
    t=<IF> "(" cond=expr() ")" thenBody=stmt()
            [LOOKAHEAD(1) <ELSE> elseBody=stmt()]
    {
        return new IfNode(location(t), cond, thenBody, elseBody);
    }
}

ReturnNode return_stmt():
{
    Token t;
    ExprNode expr = null;
}
{
    t=<RETURN> [expr=expr()] ";" { return new ReturnNode(location(t), expr); }
}

ExprNode expr():
{
    ExprNode lhs, rhs, expr;
    String op;
}
{
    LOOKAHEAD(term() "=") lhs=term() "=" rhs=expr()
    {
        return new AssignNode(lhs, rhs);
    }
    | LOOKAHEAD(term() opassign_op()) lhs=term() op=opassign_op() rhs=expr()
      {
          return new OpAssignNode(lhs, op, rhs);
      }
    | expr=expr9()
      {
          return expr;
      }
}

String opassign_op(): {}
{
    "+="  { return "+"; }
    | "-="  { return "-"; }
    | "*="  { return "*"; }
    | "/="  { return "/"; }
    | "%="  { return "%"; }
    | "&="  { return "&"; }
    | "|="  { return "|"; }
    | "^="  { return "^"; }
    | "<<=" { return "<<"; }
    | ">>=" { return ">>"; }
}

ExprNode expr9():
{
    ExprNode l, r;
}
{
    l=expr8() ("||" r=expr8() { l = new LogicalOrNode(l, r); })*
    {
        return l;
    }
}

ExprNode expr8():
{
    ExprNode l, r;
}
{
    l=expr7() ("&&" r=expr7() { l = new LogicalAndNode(l, r); })*
    {
        return l;
    }
}

ExprNode expr7():
{
    ExprNode l, r;
}
{
    l=expr6() ( ">"  r=expr6() { l = new BinaryOpNode(l, ">", r); }
              | "<"  r=expr6() { l = new BinaryOpNode(l, "<", r); }
              | ">=" r=expr6() { l = new BinaryOpNode(l, ">=", r); }
              | "<=" r=expr6() { l = new BinaryOpNode(l, "<=", r); }
              | "==" r=expr6() { l = new BinaryOpNode(l, "==", r); }
              | "!=" r=expr6() { l = new BinaryOpNode(l, "!=", r); } )*
    {
        return l;
    }
}

ExprNode expr6():
{
    ExprNode l, r;
}
{
    l=expr5() ("|" r=expr5() { l = new BinaryOpNode(l, "|", r); })*
    {
        return l;
    }
}

ExprNode expr5():
{
    ExprNode l, r;
}
{
    l=expr4() ("^" r=expr4() { l = new BinaryOpNode(l, "^", r); })*
    {
        return l;
    }
}

ExprNode expr4():
{
    ExprNode l, r;
}
{
    l=expr3() ("&" r=expr3() { l = new BinaryOpNode(l, "&", r); })*
    {
        return l;
    }
}

ExprNode expr3():
{
    ExprNode l, r;
}
{
    l=expr2() ( ">>" r=expr2() { l = new BinaryOpNode(l, ">>", r); }
              | "<<" r=expr2() { l = new BinaryOpNode(l, "<<", r); }
              )*
    {
        return l;
    }
}

ExprNode expr2():
{
	ExprNode l, r;
}
{
	l=expr1() ( "+" r=expr1() { l = new BinaryOpNode(l, "+", r); }
	          | "-" r=expr1() { l = new BinaryOpNode(l, "-", r); }
			  )*
	{
		return l;
	}
}

ExprNode expr1():
{
	ExprNode l, r;
}
{
	l=primary() ( "*" r=term() { l = new BinaryOpNode(l, "*", r); }
			    | "/" r=term() { l = new BinaryOpNode(l, "/", r); }
				| "%" r=term() { l = new BinaryOpNode(l, "%", r); }
			    )*
	{
		return l;
	}
}

ExprNode term():
{
    TypeNode t;
    ExprNode n;
}
{
      LOOKAHEAD("(" Type()) "(" t=Type() ")" n=term() { return new CastNode(t, n); }
      | n=postfix() { return n; }
}

ExprNode postfix():
{
    List<ExprNode> args;
    ExprNode expr;
}
{
    expr=primary()
    ("(" args=args() ")" { expr = new FnCallNode(expr, args); })*
    {
        return expr;
    }
}

List<ExprNode> args():
{
    List<ExprNode> args = new ArrayList<>();
    ExprNode arg;
}
{
    [ arg=expr() { args.add(arg); }
      ("," arg=expr() { args.add(arg); })* ]
    {
        return args;
    }
}

ExprNode primary():
{
	Token t;
}
{
	t=<INTEGER>
		{
		    return integerNode(location(t), t.image);
		}
	| t=<CHARACTER>
        {
            return new IntegerLiteralNode(
                location(t),
                IntegerTypeRef.i8Ref(),
                characterCode(t.image)
            );
        }
    | t=<STRING>
        {
            return new StringLiteralNode(
                location(t),
                new PointerTypeRef(IntegerTypeRef.i8Ref()),
                stringValue(t.image)
            );
        }
    | t=<IDENTIFIER>
        {
            return new VariableNode(location(t), t.image);
        }
}
