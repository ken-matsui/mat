options {
	STATIC = false;
	DEBUG_PARSER = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(Parser)

package mat.parser;

import mat.exception.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;

class Parser {
	private String sourceName;
	private Set<String> knownTypedefs;

	public Parser(Reader s, String name, boolean debug) {
		this(s);
		this.sourceName = name;
		this.knownTypedefs = new HashSet<String>();
		if (debug) {
			enable_tracing();
		} else {
			disable_tracing();
		}
	}

	public long parse() throws SyntaxException {
		try {
			return expr2();
		} catch (TokenMgrError err) {
			throw new SyntaxException(err.getMessage());
		} catch (ParseException ex) {
			throw new SyntaxException(ex.getMessage());
		}
		//catch (LookaheadSuccess err) {
		//	throw new SyntaxException("syntax error");
		//}
	}

	static final public String SOURCE_ENCODING = "UTF-8";

	static public Parser newFileParser(File file, boolean debug)
									   throws FileException {
		try {
			BufferedReader r = new BufferedReader(
				new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING)
			);
			return new Parser(r, file.getPath(), debug);
		} catch (FileNotFoundException ex) {
			throw new FileException(ex.getMessage());
		} catch (UnsupportedEncodingException ex) {
			throw new Error("UTF-8 is not supported?: " + ex.getMessage());
		}
	}

	static public long parseFile(File file, boolean debug)
								 throws SyntaxException, FileException {
		return newFileParser(file, debug).parse();
	}

	static public void main(String[] srcs) {
		for (String src : srcs) {
			try {
				System.out.println(parseFile(new File(src), false));
			} catch (SyntaxException ex) {
				System.err.println(ex.getMessage());
			} catch (FileException ex) {
				System.err.println(ex.getMessage());
			}
		}
	}
}
PARSER_END(Parser)

SKIP: { <[" ", "\t", "\r", "\n"]> }

TOKEN: {
	<INTEGER: (["0"-"9"])+>
}

long expr2():
{
	long l, r;
}
{
	l=expr1() ( "+" r=expr1() { l = l + r; }
	          | "-" r=expr1() { l = l - r; }
			  )* <EOF>
			{
				return l;
			}
}

long expr1():
{
	long l, r;
}
{
	l=primary() ( "*" r=primary() { l = l * r; }
			    | "/" r=primary() { l = l / r; }
				| "%" r=primary() { l = l % r; }
			    )*
			{
				return l;
			}
}

long primary():
{
	Token t;
}
{
	t=<INTEGER>
		{
			return Long.parseLong(t.image);
		}
}
